# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
    # default concurrency is a available CPU number
    concurrency: 4

    # timeout for analysis, e.g. 30s, 5m, default is 1m
    timeout: 1m

    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1

    # include test files or not, default is true
    tests: true

    # which dirs to skip: issues from them won't be reported;
    # can use regexp here: generated.*, regexp is applied on full path;
    # default value is empty list, but default dirs are skipped independently
    # from this option's value (see skip-dirs-use-default).
    # "/" will be replaced by current OS file path separator to properly work
    # on Windows.
    skip-dirs:
        - genproto

    # default is true. Enables skipping of directories:
    #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
    skip-dirs-use-default: true


# output configuration options
output:
    # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
    # default is "colored-line-number"
    format: colored-line-number

    # print lines of code with issue, default is true
    print-issued-lines: true

    # print linter name in the end of issue text, default is true
    print-linter-name: true

    # make issues output unique by line, default is true
    uniq-by-line: true

    # sorts results by: filepath, line and column
    sort-results: false


# all available settings of specific linters
linters-settings:
    cyclop:
        # the maximal code complexity to report
        max-complexity: 10

    errorlint:
        # Check whether fmt.Errorf uses the %w verb for formatting errors. See the readme for caveats
        errorf: true
        # Check for plain type assertions and type switches
        asserts: true
        # Check for plain error comparisons
        comparison: true

    funlen:
        lines: 60
        statements: 40

    gocognit:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 10

    goconst:
        # minimal length of string constant, 3 by default
        min-len: 3
        # minimum occurrences of constant string count to trigger issue, 3 by default
        min-occurrences: 3
        # ignore test files, false by default
        ignore-tests: false
        # look for existing constants matching the values, true by default
        match-constant: true
        # search also for duplicated numbers, false by default
        numbers: false
        # minimum value, only works with goconst.numbers, 3 by default
        min: 3
        # maximum value, only works with goconst.numbers, 3 by default
        max: 3
        # ignore when constant is not used as function argument, true by default
        ignore-calls: true

    gocritic:
        # Which checks should be enabled; can't be combined with 'disabled-checks';
        # See https://go-critic.github.io/overview#checks-overview
        # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
        # By default list of stable checks is used.
        enabled-checks:
            - nestingReduce
            - unnamedresult
            - ruleguard
            - truncateCmp

        # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
        disabled-checks:
            - regexpMust

        # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
        # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
        enabled-tags:
            - performance
        disabled-tags:
            - experimental

        # Settings passed to gocritic.
        # The settings key is the name of a supported gocritic checker.
        # The list of supported checkers can be find in https://go-critic.github.io/overview.
        settings:
            captLocal: # must be valid enabled check name
                # whether to restrict checker to params only (default true)
                paramsOnly: true
            elseif:
                # whether to skip balanced if-else pairs (default true)
                skipBalanced: true
            hugeParam:
                # size in bytes that makes the warning trigger (default 80)
                sizeThreshold: 200
            nestingReduce:
                # min number of statements inside a branch to trigger a warning (default 5)
                bodyWidth: 5
            rangeExprCopy:
                # size in bytes that makes the warning trigger (default 512)
                sizeThreshold: 512
                # whether to check test functions (default true)
                skipTestFuncs: true
            rangeValCopy:
                # size in bytes that makes the warning trigger (default 128)
                sizeThreshold: 32
                # whether to check test functions (default true)
                skipTestFuncs: true
            truncateCmp:
                # whether to skip int/uint/uintptr types (default true)
                skipArchDependent: true
            underef:
                # whether to skip (*x).method() calls where x is a pointer receiver (default true)
                skipRecvDeref: true
            unnamedResult:
                # whether to check exported functions
                checkExported: true

    gocyclo:
        # minimal code complexity to report, 30 by default (but we recommend 10-20)
        min-complexity: 10

    godot:
        # comments to be checked: `declarations`, `toplevel`, or `all`
        scope: declarations
        # list of regexps for excluding particular comment lines from check
        exclude:
        # example: exclude comments which contain numbers
        # - '[0-9]+'
        # check that each sentence starts with a capital letter
        capital: false

    godox:
        # report any comments starting with keywords, this is useful for TODO or FIXME comments that
        # might be left in the code accidentally and should be resolved before merging
        keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
            - NOTE
            - OPTIMIZE # marks code that should be optimized before merging
            - HACK # marks hack-arounds that should be removed before merging

    gofmt:
        # simplify code: gofmt with `-s` option, true by default
        simplify: true

    gofumpt:
        # Select the Go version to target. The default is `1.15`.
        lang-version: "1.16"

        # Choose whether or not to use the extra rules that are disabled
        # by default
        extra-rules: true

    goimports:
        # put imports beginning with prefix after 3rd-party packages;
        # it's a comma-separated list of prefixes
        local-prefixes: github.com/abdullohsattorov

    golint:
        # minimal confidence for issues, default is 0.8
        min-confidence: 0.8

    gomnd:
        settings:
            mnd:
                # the list of enabled checks, see https://github.com/tommy-muehle/go-mnd/#checks for description.
                checks: argument,case,condition,operation,return,assign
                # ignored-numbers: 1000
                # ignored-files: magic_.*.go
                # ignored-functions: math.*

    gomoddirectives:
        # Allow local `replace` directives. Default is false.
        replace-local: false
        # List of allowed `replace` directives. Default is empty.
        replace-allow-list:
            - launchpad.net/gocheck
        # Allow to not explain why the version has been retracted in the `retract` directives. Default is false.
        retract-allow-no-explanation: false
        # Forbid the use of the `exclude` directives. Default is false.
        exclude-forbidden: false

    gosec:
        # To select a subset of rules to run.
        # Available rules: https://github.com/securego/gosec#available-rules
        includes:
            - G401
            - G306
            - G101
        # To specify a set of rules to explicitly exclude.
        # Available rules: https://github.com/securego/gosec#available-rules
        excludes:
            - G204
        # Exclude generated files
        exclude-generated: true
        # Filter out the issues with a lower severity than the given value. Valid options are: low, medium, high.
        severity: "low"
        # Filter out the issues with a lower confidence than the given value. Valid options are: low, medium, high.
        confidence: "low"
        # To specify the configuration of rules.
        # The configuration of rules is not fully documented by gosec:
        # https://github.com/securego/gosec#configuration
        # https://github.com/securego/gosec/blob/569328eade2ccbad4ce2d0f21ee158ab5356a5cf/rules/rulelist.go#L60-L102
        config:
            G306: "0600"
            G101:
                pattern: "(?i)example"
                ignore_entropy: false
                entropy_threshold: "80.0"
                per_char_threshold: "3.0"
                truncate: "32"

    gosimple:
        # Select the Go version to target. The default is '1.13'.
        go: "1.16"
        # https://staticcheck.io/docs/options#checks
        checks: [ "all" ]

    govet:
        # report about shadowed variables
        check-shadowing: true

        # settings per analyzer
        settings:
            printf: # analyzer name, run `go tool vet help` to see all analyzers
                funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

        # enable or disable analyzers by name
        # run `go tool vet help` to see all analyzers
        enable:
            - atomicalign
        enable-all: false
        disable:
            - shadow
        disable-all: false

    depguard:
        list-type: blacklist
        include-go-root: false
        packages:
            - github.com/sirupsen/logrus
        packages-with-error-message:
            # specify an error message to output when a blacklisted package is used
            - github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"

    ifshort:
        # Maximum length of variable declaration measured in number of lines, after which linter won't suggest using short syntax.
        # Has higher priority than max-decl-chars.
        max-decl-lines: 1
        # Maximum length of variable declaration measured in number of characters, after which linter won't suggest using short syntax.
        max-decl-chars: 30

    importas:
        # if set to `true`, force to use alias.
        no-unaliased: true
        # List of aliases
        alias:
            # using `servingv1` alias for `knative.dev/serving/pkg/apis/serving/v1` package
            - pkg: knative.dev/serving/pkg/apis/serving/v1
              alias: servingv1
            # using `autoscalingv1alpha1` alias for `knative.dev/serving/pkg/apis/autoscaling/v1alpha1` package
            - pkg: knative.dev/serving/pkg/apis/autoscaling/v1alpha1
              alias: autoscalingv1alpha1
            # You can specify the package path by regular expression,
            # and alias by regular expression expansion syntax like below.
            # see https://github.com/julz/importas#use-regular-expression for details
            - pkg: knative.dev/serving/pkg/apis/(\w+)/(v[\w\d]+)
              alias: $1$2

    ireturn:
        # ireturn allows using `allow` and `reject` settings at the same time.
        # Both settings are lists of the keywords and regular expressions matched to interface or package names.
        # keywords:
        # - `empty` for `interface{}`
        # - `error` for errors
        # - `stdlib` for standard library
        # - `anon` for anonymous interfaces

        # By default, it allows using errors, empty interfaces, anonymous interfaces,
        # and interfaces provided by the standard library.
        allow:
            - anon
            - error
            - empty
            - stdlib
            # You can specify idiomatic endings for interface
            - (or|er)$

        # Reject patterns
        reject:
            - github.com\/user\/package\/v4\.Type

    lll:
        # max line length, lines longer will be reported. Default is 120.
        # '\t' is counted as 1 character by default, and can be changed with the tab-width option
        line-length: 120
        # tab width in spaces. Default to 1.
        tab-width: 1

    makezero:
        # Allow only slices initialized with a length of zero. Default is false.
        always: false

    maligned:
        # print struct with more effective memory layout or not, false by default
        suggest-new: true

    misspell:
        # Correct spellings using locale preferences for US or UK.
        # Default is to use a neutral variety of English.
        # Setting locale to US will correct the British spelling of 'colour' to 'color'.
        locale: US
        ignore-words:
            - someword

    nakedret:
        # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
        max-func-lines: 30

    nestif:
        # minimal complexity of if statements to report, 5 by default
        min-complexity: 4

    nilnil:
        # By default, nilnil checks all returned types below.
        checked-types:
            - ptr
            - func
            - iface
            - map
            - chan

    nlreturn:
        # size of the block (including return statement that is still "OK")
        # so no return split required.
        block-size: 1

    prealloc:
        # XXX: we don't recommend using this linter before doing performance profiling.
        # For most programs usage of prealloc will be a premature optimization.

        # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
        # True by default.
        simple: true
        range-loops: true # Report preallocation suggestions on range loops, true by default
        for-loops: false # Report preallocation suggestions on for loops, false by default

    promlinter:
        # Promlinter cannot infer all metrics name in static analysis.
        # Enable strict mode will also include the errors caused by failing to parse the args.
        strict: false
        # Please refer to https://github.com/yeya24/promlinter#usage for detailed usage.
        disabled-linters:
        #  - "Help"
        #  - "MetricUnits"
        #  - "Counter"
        #  - "HistogramSummaryReserved"
        #  - "MetricTypeInName"
        #  - "ReservedChars"
        #  - "CamelCase"
        #  - "lintUnitAbbreviations"

    predeclared:
        # comma-separated list of predeclared identifiers to not report on
        ignore: ""
        # include method names and field names (i.e., qualified names) in checks
        q: false

    rowserrcheck:
        packages:
            - github.com/jmoiron/sqlx

    revive:
        # see https://github.com/mgechev/revive#available-rules for details.
        ignore-generated-header: true
        severity: warning
        rules:
            - name: indent-error-flow
              severity: warning
            - name: add-constant
              severity: warning
              arguments:
                  - maxLitCount: "3"
                    allowStrs: '""'
                    allowInts: "0,1,2"
                    allowFloats: "0.0,0.,1.0,1.,2.0,2."

    staticcheck:
        # Select the Go version to target. The default is '1.13'.
        go: "1.15"
        # https://staticcheck.io/docs/options#checks
        checks: [ "all" ]

    stylecheck:
        # Select the Go version to target. The default is '1.13'.
        go: "1.15"
        # https://staticcheck.io/docs/options#checks
        checks: [ "all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022" ]
        # https://staticcheck.io/docs/options#dot_import_whitelist
        dot-import-whitelist:
            - fmt
        # https://staticcheck.io/docs/options#initialisms
        initialisms: [ "ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS" ]
        # https://staticcheck.io/docs/options#http_status_code_whitelist
        http-status-code-whitelist: [ "200", "400", "404", "500" ]

    tagliatelle:
        # check the struck tag name case
        case:
            # use the struct field name to check the name of the struct tag
            rules:
                # any struct tag type can be used.
                # support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`
                json: camel
                yaml: camel
                xml: camel
                bson: camel
                avro: snake
                mapstructure: kebab

    testpackage:
        # regexp pattern to skip files
        skip-regexp: (export|internal)_test\.go

    unparam:
        # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
        # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
        # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
        # with golangci-lint call it on a directory with the changed file.
        check-exported: false

    unused:
        # Select the Go version to target. The default is '1.13'.
        go: "1.16"

    varnamelen:
        # The longest distance, in source lines, that is being considered a "small scope." (defaults to 5)
        # Variables used in at most this many lines will be ignored.
        max-distance: 5
        # The minimum length of a variable's name that is considered "long." (defaults to 3)
        # Variable names that are at least this long will be ignored.
        min-name-length: 3
        # Optional list of variable names that should be ignored completely. (defaults to empty list)
        ignore-names:
            - err
        # Optional list of variable declarations that should be ignored completely. (defaults to empty list)
        # Entries must be in the form of "<variable name> <type>" or "<variable name> *<type>" for
        # variables, or "const <name>" for constants.
        ignore-decls:
            - c echo.Context
            - t testing.T
            - f *foo.Bar
            - e error
            - i int
            - const C

    whitespace:
        multi-if: false   # Enforces newlines (or comments) after every multi-line if statement
        multi-func: false # Enforces newlines (or comments) after every multi-line function signature


linters:
    enable:
        - megacheck
        - govet
        - goimports
        - gofumpt
        - gofmt
        - errcheck
    fast: false